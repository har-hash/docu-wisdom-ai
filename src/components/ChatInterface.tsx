import { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, FileText, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  sources?: {
    text: string;
    page?: number;
    confidence: number;
  }[];
}

interface ChatInterfaceProps {
  hasDocuments: boolean;
  onSendMessage: (message: string) => Promise<void>;
  isLoading: boolean;
}

export const ChatInterface = ({ hasDocuments, onSendMessage, isLoading }: ChatInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSend = async () => {
    if (!input.trim() || !hasDocuments || isLoading) return;

    const userMessage: Message = {
      id: `user-${Date.now()}`,
      type: 'user',
      content: input.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');

    try {
      await onSendMessage(userMessage.content);
      
      // Simulate AI response (replace with actual API call)
      const aiResponse: Message = {
        id: `ai-${Date.now()}`,
        type: 'assistant',
        content: `Based on the uploaded document, here's what I found regarding "${userMessage.content}":\n\nThis is a simulated response. In the actual implementation, this would be generated by the AI model using RAG (Retrieval-Augmented Generation) based on the document content.`,
        timestamp: new Date(),
        sources: [
          {
            text: "Sample extracted text from the document that was used to generate this answer...",
            page: 1,
            confidence: 0.89
          },
          {
            text: "Another relevant section from the document...",
            page: 3,
            confidence: 0.76
          }
        ]
      };

      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const suggestedQuestions = [
    "What are the key terms and conditions?",
    "What is the coverage for a 30-year-old male?",
    "What are the exclusions mentioned?",
    "What is the claim process?",
    "What are the premium payment options?"
  ];

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <div className="text-center py-12">
            <div className="mx-auto w-16 h-16 rounded-full gradient-ai flex items-center justify-center shadow-glow mb-4">
              <Bot className="h-8 w-8 text-white" />
            </div>
            <h3 className="text-xl font-semibold mb-2">AI Document Assistant</h3>
            <p className="text-muted-foreground mb-6 max-w-md mx-auto">
              {hasDocuments 
                ? "Ask me anything about your uploaded documents. I'll provide answers based on the content."
                : "Please upload a document first to start asking questions."
              }
            </p>
            
            {hasDocuments && (
              <div className="space-y-3">
                <p className="text-sm font-medium text-muted-foreground">Try asking:</p>
                <div className="flex flex-wrap gap-2 justify-center max-w-2xl mx-auto">
                  {suggestedQuestions.map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => setInput(question)}
                      className="text-xs transition-smooth hover:shadow-ai"
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : (
          messages.map((message) => (
            <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`flex max-w-3xl ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'} gap-3`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.type === 'user' 
                    ? 'bg-primary text-primary-foreground' 
                    : 'gradient-ai shadow-glow'
                }`}>
                  {message.type === 'user' ? (
                    <User className="h-4 w-4" />
                  ) : (
                    <Bot className="h-4 w-4 text-white" />
                  )}
                </div>
                <div className={`flex-1 ${message.type === 'user' ? 'text-right' : ''}`}>
                  <Card className={`p-4 shadow-card ${
                    message.type === 'user' 
                      ? 'bg-primary text-primary-foreground ml-auto' 
                      : 'bg-card'
                  }`}>
                    <p className="whitespace-pre-wrap">{message.content}</p>
                    {message.sources && (
                      <div className="mt-4 pt-4 border-t border-border/50 space-y-3">
                        <div className="flex items-center gap-2">
                          <Sparkles className="h-4 w-4 text-primary" />
                          <span className="text-sm font-medium">Sources</span>
                        </div>
                        {message.sources.map((source, index) => (
                          <div key={index} className="text-sm bg-muted/50 rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-2">
                                <FileText className="h-3 w-3" />
                                <span className="text-xs text-muted-foreground">
                                  Page {source.page}
                                </span>
                              </div>
                              <Badge variant="secondary" className="text-xs">
                                {Math.round(source.confidence * 100)}% match
                              </Badge>
                            </div>
                            <p className="text-muted-foreground leading-relaxed">
                              "{source.text}"
                            </p>
                          </div>
                        ))}
                      </div>
                    )}
                  </Card>
                  <p className="text-xs text-muted-foreground mt-1 px-1">
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
              </div>
            </div>
          ))
        )}
        {isLoading && (
          <div className="flex justify-start">
            <div className="flex gap-3 max-w-3xl">
              <div className="w-8 h-8 rounded-full gradient-ai flex items-center justify-center shadow-glow">
                <Bot className="h-4 w-4 text-white" />
              </div>
              <Card className="p-4 shadow-card">
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent" />
                  <span className="text-sm text-muted-foreground">Analyzing document...</span>
                </div>
              </Card>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 p-4">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={hasDocuments ? "Ask a question about your documents..." : "Upload a document first..."}
            disabled={!hasDocuments || isLoading}
            className="flex-1 transition-smooth focus:shadow-ai"
          />
          <Button
            onClick={handleSend}
            disabled={!input.trim() || !hasDocuments || isLoading}
            variant="ai"
            size="icon"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};